import os
from os import walk
from os.path import join, splitext
import shutil
import multiprocessing as mp
import requests
import time

benignDIR = '/media/subhasis/dataset/good/'
malDIR = '/media/subhasis/dataset/bad/'
unprocessed = '/media/subhasis/dataset/UP/'
tesDirectory = '/media/subhasis/chunk1'

keys = ['key 1', \
        'key 2']

def virusTotalAPICall(key, apk_hash):
    result = 0
    url = 'https://www.virustotal.com/vtapi/v2/file/report'
    params = {'apikey': key, 'resource': apk_hash}
    responseCode = 0
    try:
        response = requests.get(url, params=params)
        #print apk_hash + " :: "
        print response
        responseCode = response.status_code
        print response.json()#['positives']
        result = response.json()['positives']
    except:
        time.sleep(1)
        print "Exception for : " + apk_hash
        if(responseCode == 204):
            result = -2
        else:
            result = -1

    return result

class CheckCount:
    def __init__(self):
        self.totalFiles = 0
        self.completed = 0

    def incCount(self):
        self.totalFiles +=1

    def getTotal(self):
        return self.totalFiles

    def completedCallback(self, res = ''):
        self.completed += 1
        print(self.completed, " files Completed out of ", self.totalFiles)

def testAndMove(filePath, fileHash, key):
    time.sleep(1)
    result = virusTotalAPICall(key, fileHash)
    if result == 0:
        print fileHash + "--> good"
        shutil.move(filePath,benignDIR)
    elif result == -1:
        print fileHash + "--> not processed"
        shutil.move(filePath,unprocessed)
    elif result == -2:
        print "Limit Exceeded"
        return
    else:
        shutil.move(filePath,malDIR)
        print fileHash + "--> bad"



def processAPKs(apk_dir_path):
    pool = mp.Pool(3)
    ProcessingResults = []
    countObj = CheckCount()
    for (dirpath, dirnames, filenames) in walk(apk_dir_path):
        for filename in filenames:
            #print dirpath
            apkPath = join(dirpath, filename)
            print apkPath
            #testAndMove(apkPath, filename[:32], keys[countObj.getTotal() % 18])
            ProcessingResults = pool.apply_async(testAndMove, args=(apkPath, filename[:32], keys[countObj.getTotal() % 18]), callback=countObj.completedCallback)
            #countObj.completedCallback('abc')
            countObj.incCount()

    pool.close()
    pool.join()

processAPKs(tesDirectory)
